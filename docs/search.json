[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Operations Research Primer",
    "section": "",
    "text": "1 Introduction\nOR Primer is a collection of resources to teach fundamentals of computational optimization regarding Linear Programming and Mixed Integer (Linear) Programming.\nThis collection targets those who want to get a jumpstart without any technical and theoretical details, except the absolutely required fundamental terms. Therefore, there will be lots of examples.\nPrimary focus of OR Primer is to give the reader the ability to discern if a “business” problem can be converted to an OR (LP or MILP) problem. In essence “yes” or “no” depends on the answers of the following questions: “Is there a decision to be made? (i.e. Decision Variables)”, “Are there limitations and requirements? (i.e. Constraints)”, “What is the ultimate aim? (i.e. Objective Function)” and “Can we describe the problem in linear terms? (i.e. Linearity)”.\nAt the second stage, we will focus on transferring the “business” problem from verbal to mathematical form. Reader is expected to get a sense of how to write a mathematical model in a standard way.\nFinally, we will learn how to describe the model in code. We will learn about Algebraic Modelling Languages (AML) and solvers. Our focus will be on scripting languages such as R, Python and Julia.\nOptionally, we will discuss theory. Topics such as simplex, duality, interior points etc. will be briefly explained but it is up to the reader to really dive in the theory or if she is just happy with the coding.\nThere will be lots of external resources. Feel free to add them on Discussions."
  },
  {
    "objectID": "linprog.html#mathematical-model",
    "href": "linprog.html#mathematical-model",
    "title": "Linear Programming",
    "section": "Mathematical Model",
    "text": "Mathematical Model\nA mathematical representation of LP model is provided below.\n\\[\\begin{gather}\n\\min c^\\mathsf{T}x \\\\\nAx = b \\\\\nx \\ge 0  \\\\\n\\end{gather}\\]\n\nParts of the Model\nAn LP model requires the following object types to be complete.\n\nDecision Variables (DV): Decision variables are the objects which the algorithm (i.e. solver) decides its value. A combination of a decision variable value set is a solution. In LP it is not possible to define a DV in non-linear (e.g., \\(x^2\\)) terms or in interaction with other DVs (e.g., \\(xy\\)). In the model, elements of \\(x\\) are decision variables. \\(x\\) is an \\(n\\)-sized vector.\nCoefficients and constants: It is possible to add pre-defined constants as coefficients to decision variables or by themselves. In the model, elements of \\(A\\), \\(b\\) and \\(c\\) are constants and coefficients. \\(A\\) is an \\(m\\) x \\(n\\) matrix, \\(b\\) is an \\(m\\)-sized vector and \\(c\\) is an \\(n\\)-sized vector.\nConstraints: Constraints are the rules which the decision variable values should satisfy in order to be a valid (i.e. feasible) solution. In the model, \\(Ax = b\\) system of equations and non-negativity terms (\\(x \\ge 0\\)) are the constraints.\nObjective Function: Objective function defines the direction (either minimization or maximization) and the evaluation formula of the solution quality. In the model, the term \\(\\min c^\\mathsf{T}x\\) is the objective function and the solver will try to minimize \\(c^\\mathsf{T}x\\).\n\n\n\nIndices\nThere are also indices which we will use to define elements in decision variables, coefficients, constants and constraints. For instance \\(x_{i}\\) is the \\(i\\) th element of the decision variable vector and \\(A_{i,j}\\) is the (i,j)th element of the coefficient matrix. Let’s rewrite the model.\n\\[\\begin{gather}\n\\min \\sum_{j=1}^{n} c_jx_j \\tag{1} \\\\\n\\sum_{j=1}^{n}A_{i,j}x_j = b_i \\ \\forall_{i \\in 1..m}\\tag{2}  \\\\\nx_j \\ge 0 \\ \\forall_{j \\in 1..n} \\tag{3}  \\\\\n\\end{gather}\\]\nThese parts may also be multi-dimensional. For instance \\(x_{i,j,k,t}\\) is possible."
  },
  {
    "objectID": "giapetto.html#problem-description",
    "href": "giapetto.html#problem-description",
    "title": "2  Giapetto Example",
    "section": "2.1 Problem Description",
    "text": "2.1 Problem Description\n“Giapetto’s Woodcarving, Inc., manufactures two types of wooden toys: soldiers and trains.\nA soldier sells for $27 and uses $10 worth of raw materials. Each soldier that is manufactured increases Giapetto’s variable labor and overhead costs by $14. A train sells for $21 and uses $9 worth of raw materials. Each train built increases Giapetto’s variable labor and overhead costs by $10.\nThe manufacture of wooden soldiers and trains requires two types of skilled labor: carpentry and finishing. A soldier requires 2 hours of finishing labor and 1 hour of carpentry labor. A train requires 1 hour of finishing labor and 1 hour of carpentry labor.\nEach week, Giapetto can acquire all of the needed raw material, but he is only allotted 100 finishing hours and 80 carpentry hours. There is an unlimited demand for trains. However, at most, 40 soldiers are sold each week.\nGiapetto wants to maximize his weekly profit (Revenues - Costs). Formulate a mathematical model for Giapetto’s situation that can be used to maximize Giapetto’s weekly profit.”\nLet’s convert problem statement into a number of model building steps in the next section."
  },
  {
    "objectID": "giapetto.html#model-building-steps",
    "href": "giapetto.html#model-building-steps",
    "title": "2  Giapetto Example",
    "section": "2.2 Model Building Steps",
    "text": "2.2 Model Building Steps\n\nLet’s calculate the net profit of a soldier and a train, respectively. Sale price of a soldier is $27, raw material cost is $10 and labor/overhead costs are $14. So producing a soldier toy yields $3 of net profit. With the same process a train’s net profit is $2.\nOur aim is to maximize our total net profit. Let’s denote \\(x_{1}\\) as the number of soldiers produced and \\(x_{2}\\) as the number of trains produced. Values \\(x_{1}\\) and \\(x_{2}\\) will be determined by the solver. Therefore they are decision variables.\nSo, our total net profit can be defined as \\(z = 3x_{1} + 2x_{2}\\). This is also our objective function.\nFor finishing tasks, a soldier requires 2 hours and a train requires 1 hour of labor. Finishing labor capacity is 100 hours. So, its mathematical expression is \\(2x_{1} + x_{2} \\le 100\\).\nFor carpentry tasks, a soldier requires 1 hour and a train requires 1 hour of labor. Carpentry labor capacity is 80 hours. So, its mathematical expression is \\(x_{1} + x_{2} \\le 80\\).\nDemand for soldiers is limited with 40. So, its mathematical expression is \\(x_{1} \\le 40\\).\nAlso, it is not possible to sell negative amounts of soldiers or toys (no returns). Therefore both \\(x_{1}\\) and \\(x_{2}\\) should be greater than zero (non-negativity constraints).\n\nLet’s gather all the steps in a single model in the next section."
  },
  {
    "objectID": "giapetto.html#mathematical-model",
    "href": "giapetto.html#mathematical-model",
    "title": "2  Giapetto Example",
    "section": "2.3 Mathematical Model",
    "text": "2.3 Mathematical Model\n\n2.3.1 Decision Variables\n\n\\(x_1\\): Number of soldiers to be manufactured.\n\n\\(x_2\\): Number of trains to be manufactured.\n\n\n\n2.3.2 Model\n\\[\\begin{gather}\n\\max z = 3x_{1} + 2x_{2} \\label{eq:obj.fun} \\\\\ns.t. \\nonumber \\\\\n2x_{1} + x_{2} \\le 100 \\label{eq:finishing.constraint} \\\\\nx_{1} + x_{2} \\le 80 \\label{eq:carpentry.constraint}\\\\\nx_{1} \\le 40 \\label{eq:demand.constraint}\\\\\nx_{1},x_{2} \\ge 0 \\label{eq:non-negativity}\\\\\n\\end{gather}\\]\n\n\n2.3.3 Constraints\n\n(\\(\\ref{eq:obj.fun}\\)) is the objective function to maximize total profits. Each soldier yields $3 profit and each train $2.\n(\\(\\ref{eq:finishing.constraint}\\)) is the finishing task capacity constraint. Each soldier requires 2 hours of labor and each train requires 1 hour. Total capacity for finishing task is 100 hours.\n(\\(\\ref{eq:carpentry.constraint}\\)) is the carpentry task capacity constraint. Each soldier requires 1 hour of labor and each train requires 1 hour. Total capacity for finishing task is 80 hours.\n(\\(\\ref{eq:demand.constraint}\\)) is the maximum demand constraint for soldiers. Maximum available demand for soldiers is 40.\n(\\(\\ref{eq:non-negativity}\\)) Non-negativity constraint. It is not possible to sell negative amount of each toys (i.e. no backorders, no returns etc. in this case)."
  },
  {
    "objectID": "markowitz.html#problem-description",
    "href": "markowitz.html#problem-description",
    "title": "3  Markowitz Portfolio Example",
    "section": "3.1 Problem Description",
    "text": "3.1 Problem Description\nThere are multiple versions of this problem, but we will model a simple one. Suppose there is an array of investment items with different risk and reward values. We would like form a portfolio to minimize the total risk, given a desired return level. Naturally, risk should be higher with the return."
  },
  {
    "objectID": "markowitz.html#model-building-steps",
    "href": "markowitz.html#model-building-steps",
    "title": "3  Markowitz Portfolio Example",
    "section": "3.2 Model Building Steps",
    "text": "3.2 Model Building Steps\n\nDefine the decision variable \\(x_{i}\\) as the fraction of our portfolio assigned to investment item (i.e. stock) \\(i\\).\nDefine risk parameter as \\(\\sigma_{i}\\) and reward parameter as \\(\\mu_{i}\\) for item \\(i\\).\nDefine desired return level parameter as \\(q\\).\nAdd constraint of the total portolio should add up to \\(1\\).\nAdd constraint of minimum return requirement from the portfolio.\nAdd objective function of minimum risk to the portfolio."
  },
  {
    "objectID": "markowitz.html#mathematical-model",
    "href": "markowitz.html#mathematical-model",
    "title": "3  Markowitz Portfolio Example",
    "section": "3.3 Mathematical Model",
    "text": "3.3 Mathematical Model\n\n3.3.1 Decision Variables\n\n\\(x_{i}\\): Fraction of the budget allocated to investment item \\(i\\).\n\n\n\n3.3.2 Parameters\n\n\\(\\sigma_{j}\\): Risk parameter of item \\(i\\).\n\\(\\mu_{i}\\): Reward (return) parameter of item \\(i\\).\n\\(q\\): Required minimum reward level from the portfolioe.\n\n\n\n3.3.3 Model\n\\[\\begin{gather}\n\\min z = \\sum_{i} \\sigma_{i} x_{i} \\label{eq:obj.fun} \\\\\ns.t. \\nonumber \\\\\n\\sum_i \\mu_{i}x_{i} \\ge q \\label{eq:reward.constraint} \\\\\n\\sum_i x_{i} = 1 \\label{eq:portfolio.constraint} \\\\\nx_{i} \\ge 0, \\ \\forall_i \\label{eq:non-negativity}\\\\\n\\end{gather}\\]\n\n\n3.3.4 Constraints\n\n(\\(\\ref{eq:obj.fun}\\)) is the objective function to minimize total spending.\n(\\(\\ref{eq:reward.constraint}\\)) is the minimum reward requirement constraint.\n(\\(\\ref{eq:portfolio.constraint}\\)) is the constraint to make sure that sum of all portfolio fractions is 1.\n(\\(\\ref{eq:non-negativity}\\)) Non-negativity constraint. It is not possible to sell negative amount of each toys (i.e. no backorders, no returns etc. in this case)."
  },
  {
    "objectID": "diet.html#problem-description",
    "href": "diet.html#problem-description",
    "title": "4  Diet Example",
    "section": "4.1 Problem Description",
    "text": "4.1 Problem Description\nProblem statement is as follows.\n“For a moderately active man weighing 154 pounds, how much of each of 77 foods should be eaten on a daily basis so that the man’s intake of nine nutrients will be at least equal to the recommended dietary allowances (RDAs) suggested by the National Research Council in 1943, with the cost of the diet being minimal?”\nStigler identifies 9 nutrients (calories, protein, calcium, iron etc.) and their recommended intakes. Also there is a list of nutrients with their nutritional data per dollar. Full data is given in the following (link).\nStigler wants the minimal cost menu which will satisfy nutritional requirements."
  },
  {
    "objectID": "diet.html#model-building-steps",
    "href": "diet.html#model-building-steps",
    "title": "4  Diet Example",
    "section": "4.2 Model Building Steps",
    "text": "4.2 Model Building Steps\n\nDefine the decision variable \\(x_{i}\\) as the budget in dollars assigned to food \\(i\\).\nDefine nutritional requirement parameter as \\(b_{j}\\) for the nutrient \\(j\\).\nDefine \\(a_{i,j}\\) as the nutritional level from food \\(i\\) of nutrient \\(j\\).\nDefine objective function as them minimization of total cost.\nDefine constraints to satisfy nutritional demand by the food items."
  },
  {
    "objectID": "diet.html#mathematical-model",
    "href": "diet.html#mathematical-model",
    "title": "4  Diet Example",
    "section": "4.3 Mathematical Model",
    "text": "4.3 Mathematical Model\n\n4.3.1 Decision Variables\n\n\\(x_{i}\\): Total budget allocated to food item \\(i\\).\n\n\n\n4.3.2 Parameters\n\n\\(b_{j}\\): Nutritional requirement level of nutrient \\(j\\).\n\\(a_{i,j}\\): Nutritional content of food item \\(i\\) for nutrient \\(j\\).\n\n\n\n4.3.3 Model\n\\[\\begin{gather}\n\\min z = \\sum_{i} x_{i} \\label{eq:obj.fun} \\\\\ns.t. \\nonumber \\\\\n\\sum_i a_{i,j}x_{i} \\ge b_{j}, \\ \\forall_j \\label{eq:nutrition.constraints} \\\\\nx_{i} \\ge 0, \\ \\forall_i \\label{eq:non-negativity}\\\\\n\\end{gather}\\]\n\n\n4.3.4 Constraints\n\n(\\(\\ref{eq:obj.fun}\\)) is the objective function to minimize total spending.\n(\\(\\ref{eq:nutrition.constraints}\\)) is the set of constraints to satisfy all nutritional requirements.\n(\\(\\ref{eq:non-negativity}\\)) Non-negativity constraint. It is not possible to sell negative amount of each toys (i.e. no backorders, no returns etc. in this case)."
  },
  {
    "objectID": "milpprog.html#mathematical-model",
    "href": "milpprog.html#mathematical-model",
    "title": "Mixed Integer (Linear) Programming",
    "section": "Mathematical Model",
    "text": "Mathematical Model\nMathematical representation of MIP/MILP model is almost the same as LP with the exception of the inclusion of integer (and binary) decision variable types.\n\\[\\begin{gather}\n\\min c^\\mathsf{T}x \\\\\nAx + By + Cw = b \\\\\nx \\ge 0  \\\\\ny \\in \\{0,1,...\\} \\\\\nw \\in \\{0,1\\} \\\\\n\\end{gather}\\]\nHere in our case \\(y\\) represents the set of integer decision variables and \\(w\\) represents binary decision variables. Even though binary decision variables are a subset of integer variables, due to their wide usage it is more convenient to make such a distinction."
  },
  {
    "objectID": "knapsack.html#problem-description",
    "href": "knapsack.html#problem-description",
    "title": "5  Knapsack Example",
    "section": "5.1 Problem Description",
    "text": "5.1 Problem Description\nSuppose there is a “space” (e.g. a knapsack) with a single dimensional capacity of \\(W\\). Also we have a set of items with value and weight properties. We would like to determine which items to include in the knapsack to get the total maximum value from the items in the knapsack."
  },
  {
    "objectID": "knapsack.html#model-building-steps",
    "href": "knapsack.html#model-building-steps",
    "title": "5  Knapsack Example",
    "section": "5.2 Model Building Steps",
    "text": "5.2 Model Building Steps\n\nDefine the decision variables (\\(x_i\\)) as whether item \\(i\\) is in the knapsack or not. These decision variables are defined as binary.\nDefine value (\\(v_i\\)) and weight (\\(w_i\\)) parameters for each item \\(i\\).\nDefine a capacity parameter (\\(W\\)) for the knapsack.\nDefine capacity constraint as the total weight of items should not exceed capacity parameter.\nDefine objective function as the maximization of total value of items included in the knapsack."
  },
  {
    "objectID": "knapsack.html#mathematical-model",
    "href": "knapsack.html#mathematical-model",
    "title": "5  Knapsack Example",
    "section": "5.3 Mathematical Model",
    "text": "5.3 Mathematical Model\n\n5.3.1 Decision Variables\n\n\\(x_i\\): Whether item \\(i\\) is included in the knapsack or not (binary variable).\n\n\n\n5.3.2 Parameters\n\n\\(W\\): Capacity of the knapsack.\n\n\\(v_i\\): Value of item \\(i\\).\n\n\\(w_i\\): Weight of item \\(i\\).\n\n\n\n5.3.3 Model\n\\[\\begin{gather}\n\\max z = \\sum_i v_ix_i  \\label{eq:obj.fun} \\\\\ns.t. \\nonumber \\\\\n\\sum_i w_ix_i \\le W \\label{eq:knapsack.constraint} \\\\\nx_{i} \\in \\{0,1\\} \\label{eq:binary}\\\\\n\\end{gather}\\]\n\n\n5.3.4 Constraints\n\n(\\(\\ref{eq:obj.fun}\\)) is the objective function to maximize total value for items included in the knapsack.\n(\\(\\ref{eq:knapsack.constraint}\\)) is the capacity constraint of the knapsack. Each item \\(i\\) has a weight parameter \\(w_i\\) so items included in the knapsack should not weigh more than \\(W\\).\n(\\(\\ref{eq:binary}\\)) Binary constraint for decision variables."
  },
  {
    "objectID": "tsp.html#problem-description",
    "href": "tsp.html#problem-description",
    "title": "6  Traveling Salesman Example",
    "section": "6.1 Problem Description",
    "text": "6.1 Problem Description\nSuppose there are N cities from 1..N. A traveling salesperson starts at city 1, visits each city once and returns “home” (city 1). You are given the (driving) distance between each city. You are expected to find the shortest route possible.\nFor instance, for a 5 city problem 1-3-2-5-4-1 is a valid route."
  },
  {
    "objectID": "tsp.html#model-building-steps",
    "href": "tsp.html#model-building-steps",
    "title": "6  Traveling Salesman Example",
    "section": "6.2 Model Building Steps",
    "text": "6.2 Model Building Steps\n\nDefine index of cities as \\(i\\) with \\(N\\) cities.\nDefine decision variables \\(x_{i,j}\\) as a binary variable which represents whether city \\(j\\) is visited after city \\(i\\). Both \\(i\\) and \\(j\\) are part of set of cities.\nDefine (symmetric) distance between each city as \\(d_{i,j}\\).\nDefine the objective function as the minimization of total distance traveled.\nYou cannot visit the same city after itself (\\(i \\neq j\\)).\nAdd constraints to eliminate subroutes. Each city should be in the source and destination once."
  },
  {
    "objectID": "tsp.html#mathematical-model",
    "href": "tsp.html#mathematical-model",
    "title": "6  Traveling Salesman Example",
    "section": "6.3 Mathematical Model",
    "text": "6.3 Mathematical Model\n\n6.3.1 Decision Variables\n\n\\(x_{i,j}\\): Whether the salesperson used the route from city \\(i\\) to \\(j\\) (binary variable).\n\\(u_i\\): Subtour elimination variable. It represents the order of the city in the route. (\\(i \\in 2..N\\))\n\n\n\n6.3.2 Parameters\n\n\\(d_{i,j}\\): Distance from city \\(i\\) to \\(j\\) (binary variable).\n\n\n\n6.3.3 Model\n\\[\\begin{gather}\n\\max z = \\sum_i \\sum_j d_{i,j}x_{i,j}  \\label{eq:obj.fun} \\\\\ns.t. \\nonumber \\\\\nx_{j,j} = 0, \\ \\forall_i  \\label{eq:dontvisitself.constraint} \\\\\n\\sum_i x_{i,j} = 1, \\ \\forall_j  \\label{eq:destinationonce.constraint} \\\\\n\\sum_j x_{i,j} = 1, \\ \\forall_i  \\label{eq:sourceonce.constraint} \\\\\nu_i - u_j + (N-1)x_{i,j} \\leq N-2, \\ 2 \\leq i \\neq j \\leq N \\label{eq:st1.constraint} \\\\\n1 \\leq u_i, \\ \\ 2 \\leq i \\leq N \\label{eq:st2.constraint} \\\\\nu_i \\leq N-1, \\ \\ 2 \\leq i \\leq N   \\label{eq:st3.constraint} \\\\\nx_{i,j} \\in \\{0,1\\} \\label{eq:binary}\\\\\nu_{i} \\in Z \\label{eq:integer}\\\\\n\\end{gather}\\]\n\n\n6.3.4 Constraints\n\n(\\(\\ref{eq:obj.fun}\\)) is the objective function to maximize total value for items included in the knapsack.\n(\\(\\ref{eq:dontvisitself.constraint}\\)) is the constraint to prevent visiting the same city.\nConstraints (\\(\\ref{eq:destinationonce.constraint}\\)) and (\\(\\ref{eq:sourceonce.constraint}\\)) ensure each city is used once as a source (“from”) and once as a destination (“to”).\nConstraints (\\(\\ref{eq:st1.constraint}\\)), (\\(\\ref{eq:st2.constraint}\\)) and (\\(\\ref{eq:st3.constraint}\\)) ensure we get a full tour as a feasible solution. Since this is an introductory document we will not go into detail but you can read the reference.\n(\\(\\ref{eq:binary}\\)) Binary constraint for decision variables.\n(\\(\\ref{eq:integer}\\)) Integer constraint for decision variables."
  }
]